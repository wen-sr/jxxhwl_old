<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jee="http://www.springframework.org/schema/jee"
		xsi:schemaLocation="
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd">
	<!-- 读取配置文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- c3p0连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${url}"></property>
		<property name="driverClass" value="${driver}"></property>
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
<!-- 		初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="1"></property>
<!-- 		连接池中保留的最大连接数。Default: 15          -->
    	<property name="maxPoolSize" value="20" />
	</bean>
	<bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl">
			<value>jdbc:sqlserver://141.168.1.137:1433;DatabaseName=Stowage</value>
		</property>
		<property name="driverClass">
			<value>com.microsoft.sqlserver.jdbc.SQLServerDriver</value>
		</property>
		<property name="user">
			<value>sa</value>
		</property>
		<property name="password">
			<value>xxzx</value>
		</property>
<!-- 		初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="1"></property>
<!-- 		连接池中保留的最大连接数。Default: 15          -->
    	<property name="maxPoolSize" value="20" />
	</bean>
<!-- 	配置Action的类 -->
	<bean id="wXAction" class="com.jxxhwl.wx.action.WXAction" scope="prototype">
		<property name="wXObjectService" ref="wXObjectService"/>
		<property name="wXMessageService" ref="wXMessageService"/>
	</bean>
	<bean id="getShouFaAction" class="com.jxxhwl.wx.action.GetShouFaAction" scope="prototype">
		<property name="getShouFaService" ref="getShouFaService"></property>
	</bean>
	<bean id="memberAction" class="com.jxxhwl.wx.action.MemberAction" scope="prototype" >
	</bean>
	<!-- 配置业务层的类 -->
	<bean id="wXObjectService" class="com.jxxhwl.wx.service.impl.WXObjectServiceImpl">
	</bean>
	<bean id="wXMessageService" class="com.jxxhwl.wx.service.impl.WXMessageServiceImpl">
		<property name="wXMessageDao" ref="wXMessageDao"></property>
	</bean>
	<bean id="getShouFaService" class="com.jxxhwl.wx.service.impl.GetShouFaServiceImpl">
		<property name="getShouFaDao" ref="getShouFaDao"></property>
	</bean>
	<bean id="wXDispatcherService" class="com.jxxhwl.wx.service.impl.WXDispatcherServiceImpl">
		<property name="wXDispatcherDao" ref="wXDispatcherDao"></property>
	</bean>
	<!-- 配置DAO的类 -->
	<bean id="wXMessageDao" class="com.jxxhwl.wx.dao.impl.WXMessageDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>
	<bean id="getShouFaDao" class="com.jxxhwl.wx.dao.impl.GetShouFaDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
		<property name="getFaDAOImplAdd" ref="getFaDAOImplAdd"></property>
	</bean>
	<bean id="getFaDAOImplAdd" class="com.jxxhwl.wx.dao.impl.GetFaDAOImplAdd">
		<property name="dataSource" ref="dataSource2"></property>
	</bean>
	<bean id="wXDispatcherDao" class="com.jxxhwl.wx.dao.impl.WXDispatcherDaoImpl">
<!-- 		<property name="jdbcTemplate" ref="jdbcTemplate"></property> -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 配置jdbcTemplate模版 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="jdbcTemplate2" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource2"></property>
	</bean>
	<!-- 配置事物管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource2"/>
	</bean>
	
	<!-- 配置Quartz -->
	<!-- 定义目标bean和bean中的方法 -->  
    <bean id="wXDispatcher" class="com.jxxhwl.wx.action.WXDispatcher">
    	<property name="wXDispatcherService" ref="wXDispatcherService"></property>
    </bean>  
    <bean id="springJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
	    <property name="targetObject">  
	        <ref bean="wXDispatcher"/>  
	    </property>  
	    <property name="targetMethod">
	        <value>executePerDay</value>  
	    </property>  
	    <property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean> 
	<!--定义触发时间-->
	<bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail">
			<ref bean="springJob"/>
		</property>
		<!--cron表达式-->
		<property name="cronExpression">
			<value>0 0 17 * * ?</value>
		</property>
	</bean>
	<!--总管理类如果将lazy-init='false'那么容器启动就会执行调度程序-->
	<bean id="startQuertz" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" >
		<property name="triggers">
			<list>
				<ref bean="doTime"/>
			</list>
		</property>
	</bean>
<!-- 	开启事务注解配置 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<tx:annotation-driven transaction-manager="transactionManager2"/>
	
	
	<!-- 定义AOP记录异常信息到日志文件 -->
<!-- 	<aop:config> -->
		<!-- 定义切入点，用于指定目标组件和方法 -->
<!-- 		<aop:pointcut expression="within(com.jxxhwl.wx.action..*)" id="actionPointCut"/> -->
		<!-- 定义方面，将bean指定为方面来做具体的操作 -->
<!-- 		<aop:aspect id="exceptionAspecct" ref="exceptionToLog"> -->
			<!-- 定义通知 -->
<!-- 			<aop:after-throwing pointcut-ref="actionPointCut" method="exceptionToLogFile" throwing="ex"/> -->
<!-- 		</aop:aspect> -->
<!-- 	</aop:config> -->
</beans>